/** tauri-specta globals **/

import {
  Channel as TAURI_CHANNEL,
  invoke as TAURI_INVOKE,
} from '@tauri-apps/api/core';
import * as TAURI_API_EVENT from '@tauri-apps/api/event';
import { type WebviewWindow as __WebviewWindow__ } from '@tauri-apps/api/webviewWindow';

/* eslint-disable */
// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/

export const commands = {
  async greet(name: string): Promise<string> {
    return await TAURI_INVOKE('greet', { name });
  },
  async getProfiles(): Promise<Result<Profiles, string>> {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('get_profiles') };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  /**
   * later: check in the frontend
   */
  async importProfile(
    url: string,
    option: RemoteProfileOptionsBuilder | null,
  ): Promise<Result<null, string>> {
    try {
      return {
        status: 'ok',
        data: await TAURI_INVOKE('import_profile', { url, option }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async viewProfile(uid: string): Promise<Result<null, string>> {
    try {
      return {
        status: 'ok',
        data: await TAURI_INVOKE('view_profile', { uid }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  /**
   * 修改profiles的
   */
  async patchProfilesConfig(
    profiles: ProfilesBuilder,
  ): Promise<Result<null, string>> {
    try {
      return {
        status: 'ok',
        data: await TAURI_INVOKE('patch_profiles_config', { profiles }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async getVergeConfig(): Promise<Result<IVerge, string>> {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('get_verge_config') };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async patchVergeConfig(payload: IVerge): Promise<Result<null, string>> {
    try {
      return {
        status: 'ok',
        data: await TAURI_INVOKE('patch_verge_config', { payload }),
      };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async getClashInfo(): Promise<Result<ClashInfo, string>> {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('get_clash_info') };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async checkUpdate(): Promise<Result<UpdateWrapper | null, string>> {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('check_update') };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async isAppimage(): Promise<Result<boolean, string>> {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('is_appimage') };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async openThat(path: string): Promise<Result<null, string>> {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('open_that', { path }) };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
  async cleanupProcesses(): Promise<Result<null, string>> {
    try {
      return { status: 'ok', data: await TAURI_INVOKE('cleanup_processes') };
    } catch (e) {
      if (e instanceof Error) throw e;
      else return { status: 'error', error: e as any };
    }
  },
};

/** user-defined events **/

/** user-defined constants **/

/** user-defined types **/

export type ClashCore =
  | 'clash'
  | 'clash-rs'
  | 'mihomo'
  | 'mihomo-alpha'
  | 'clash-rs-alpha';
export type ClashInfo = {
  /**
   * clash core port
   */
  port: number;
  /**
   * same as `external-controller`
   */
  server: string;
  /**
   * clash secret
   */
  secret: string | null;
};
export type ClashStrategy = {
  external_controller_port_strategy: ExternalControllerPortStrategy;
};
export type ExternalControllerPortStrategy =
  | 'fixed'
  | 'random'
  | 'allow_fallback';
export type IVerge = {
  /**
   * 1. 日记轮转时间，单位：天
   */
  max_log_files: number | null;
  /**
   * 2. app log level
   * silent | error | warn | info | debug | trace
   */
  app_log_level: LoggingLevel | null;
  /**
   * 3. theme setting
   */
  theme_color: string | null;
  /**
   * 4. clash tun mode
   */
  enable_tun_mode: boolean | null;
  /**
   * 5. set system proxy
   */
  enable_system_proxy: boolean | null;
  /**
   * 6. windows service mode
   */
  enable_service_mode?: boolean | null;
  /**
   * 7. 是否使用内部的脚本支持，默认为真
   */
  enable_builtin_enhanced: boolean | null;
  /**
   * 8. clash core path
   */
  clash_core?: ClashCore | null;
  /**
   * 9. 支持关闭字段过滤，避免meta的新字段都被过滤掉，默认为真
   */
  enable_clash_fields: boolean | null;
  /**
   * 10. Clash 相关策略
   */
  clash_strategy: ClashStrategy | null;
  /**
   * 11. set system proxy bypass
   */
  system_proxy_bypass: string | null;
  /**
   * 12. verge mixed port 用于覆盖 clash 的 mixed port
   */
  verge_mixed_port: number | null;
  /**
   * 13. enable proxy guard
   */
  enable_proxy_guard: boolean | null;
  /**
   * 14. proxy guard interval
   */
  proxy_guard_interval: number | null;
  /**
   * 15. Check update when app launch
   */
  enable_auto_check_update: boolean | null;
};
export type JsonValue =
  | null
  | boolean
  | number
  | string
  | JsonValue[]
  | Partial<{ [key in string]: JsonValue }>;
export type LoggingLevel =
  | 'silent'
  | 'trace'
  | 'debug'
  | 'info'
  | 'warn'
  | 'error';
export type Profile = { type: 'remote' } & RemoteProfile;
export type Profiles = {
  current: string[];
  /**
   * profile list
   */
  items?: Profile[];
  /**
   * record valid fields for clash
   */
  valid?: string[];
  /**
   * same as PrfConfig.chain
   */
  chain: string[];
};
/**
 * Builder for [`Profiles`](struct.Profiles.html).
 *
 */
export type ProfilesBuilder = {
  current: string[] | null;
  /**
   * profile list
   */
  items: Profile[] | null;
  /**
   * record valid fields for clash
   */
  valid: string[] | null;
  /**
   * same as PrfConfig.chain
   */
  chain: string[] | null;
};
export type RemoteProfile = {
  /**
   * Profile ID
   */
  uid: string;
  /**
   * profile name
   */
  name: string;
  /**
   * profile holds the file
   */
  file: string;
  /**
   * profile description
   */
  desc: string | null;
} & {
  /**
   * subscription url
   */
  url: string;
  option: RemoteProfileOptions;
  chain: string[];
};
export type RemoteProfileOptions = {
  /**
   * see issue #13. must set the builder attr for build the user_agent for client
   */
  user_agent?: string | null;
  /**
   * subscription update interval
   */
  update_interval: number;
};
/**
 * Builder for [`RemoteProfileOptions`](struct.RemoteProfileOptions.html).
 *
 */
export type RemoteProfileOptionsBuilder = {
  /**
   * see issue #13. must set the builder attr for build the user_agent for client
   */
  user_agent: string | null;
  /**
   * subscription update interval
   */
  update_interval: number | null;
};
export type UpdateWrapper = {
  rid: number;
  available: boolean;
  current_version: string;
  version: string;
  date: string | null;
  body: string | null;
  raw_json: JsonValue;
};

type __EventObj__<T> = {
  listen: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
  once: (
    cb: TAURI_API_EVENT.EventCallback<T>,
  ) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
  emit: null extends T
    ? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
    : (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
  | { status: 'ok'; data: T }
  | { status: 'error'; error: E };

function __makeEvents__<T extends Record<string, any>>(
  mappings: Record<keyof T, string>,
) {
  return new Proxy(
    {} as unknown as {
      [K in keyof T]: __EventObj__<T[K]> & {
        (handle: __WebviewWindow__): __EventObj__<T[K]>;
      };
    },
    {
      get: (_, event) => {
        const name = mappings[event as keyof T];

        return new Proxy((() => {}) as any, {
          apply: (_, __, [window]: [__WebviewWindow__]) => ({
            listen: (arg: any) => window.listen(name, arg),
            once: (arg: any) => window.once(name, arg),
            emit: (arg: any) => window.emit(name, arg),
          }),
          get: (_, command: keyof __EventObj__<any>) => {
            switch (command) {
              case 'listen':
                return (arg: any) => TAURI_API_EVENT.listen(name, arg);
              case 'once':
                return (arg: any) => TAURI_API_EVENT.once(name, arg);
              case 'emit':
                return (arg: any) => TAURI_API_EVENT.emit(name, arg);
            }
          },
        });
      },
    },
  );
}

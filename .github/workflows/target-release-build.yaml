name: 'Release Packages'

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: '要构建的已存在标签（例如 v0.2.0）'
        required: true
        type: string

permissions:
  contents: write

env:
  CARGO_INCREMENTAL: '0'
  RUST_BACKTRACE: short
  RELEASE_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}

jobs:
  build:
    name: Build ${{ matrix.artifact_suffix }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: macos-latest
            target: aarch64-apple-darwin
            args: '--target aarch64-apple-darwin'
            artifact_suffix: macos-arm64
          - platform: macos-latest
            target: x86_64-apple-darwin
            args: '--target x86_64-apple-darwin'
            artifact_suffix: macos-x64
          - platform: ubuntu-22.04
            target: ''
            args: ''
            artifact_suffix: linux-x64
          - platform: windows-latest
            target: ''
            args: ''
            artifact_suffix: windows-x64

    env:
      RELEASE_TAG: ${{ env.RELEASE_TAG }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && format('refs/tags/{0}', github.event.inputs.tag) || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Install workspace dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Add extra Rust target
        if: matrix.target != ''
        run: rustup target add ${{ matrix.target }}

      - name: Cache Rust build
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend/tauri -> backend/tauri/target

      - name: Install Linux system dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.0-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Build and upload artifacts
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY || secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD || secrets.TAURI_KEY_PASSWORD }}
        with:
          projectPath: backend/tauri
          tauriScript: pnpm tauri
          args: ${{ matrix.args }}
          tagName: ${{ env.RELEASE_TAG }}
          releaseName: Chimera ${{ env.RELEASE_TAG }}
          releaseBody: |
            Automated build for ${{ env.RELEASE_TAG }}.

            Source: ${{ github.repository }}@${{ github.sha }}
          releaseDraft: false
          prerelease: ${{ contains(env.RELEASE_TAG, '-alpha') || contains(env.RELEASE_TAG, '-beta') || contains(env.RELEASE_TAG, '-rc') }}
